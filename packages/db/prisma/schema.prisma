generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// socket.ioの設定
 model SocketAuthToken {
  userId      String
  token       String  @unique
  expire      DateTime

  @@unique([userId, token])
}

model BattleRoom {
  id          String      @id @default(cuid())
  theme       String
  isInBattle  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  challengerId Int?
  responderId  Int?
  spectatorsId Int[]      @default([])
  challenger  User?       @relation("challenger", fields: [challengerId], references: [id])
  responder   User?       @relation("responder", fields: [responderId], references: [id])
  spectators  User[]      @relation("spectators")
}

//Auth.jsの設定
model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  roomCreated       BattleRoom[] @relation("challenger")
  roomEntered       BattleRoom[] @relation("responder")
  spectatedRooms    BattleRoom[] @relation("spectators")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Application用model
//...