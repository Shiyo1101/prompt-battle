generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// socket.ioの設定
 model SocketAuthToken {
  userId      String
  token       String  @unique
  expire      DateTime

  @@unique([userId, token])
}

model BattleRoom {
  id          String      @id @default(cuid())
  theme       String
  isInBattle  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  challengerId String?
  responderId  String?
  spectatorsId String[]      @default([])
  challenger  User?       @relation("challenger", fields: [challengerId], references: [id])
  responder   User?       @relation("responder", fields: [responderId], references: [id])
  spectators  User[]      @relation("spectators")
}

//Auth.jsの設定
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  roomCreated       BattleRoom[] @relation("challenger")
  roomEntered       BattleRoom[] @relation("responder")
  spectatedRooms    BattleRoom[] @relation("spectators")
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Application用model
//...